{"version":3,"sources":["logo.svg","Person/Person.js","Header/Header.js","Sidecompo/Sidecompo.js","Sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","person","props","react_default","a","createElement","className","onClick","click","name","age","children","type","value","onChange","change","inputStyle","height","width","border-radius","border","header","style","mainHeading","background-color","placeholder","sidecompo","compo","sidebar","map","index","Sidecompo","App","state","persons","buttonClickHandler","_this","setState","inputChangeHandler","event","target","Header","Sidebar","Person_Person","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yLCUzBC,qBAPA,SAACC,GACZ,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAeH,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,6BAAoDN,EAAMO,KAA1D,kBAA+EP,EAAMQ,KAC3HP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,UACVR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,MAAOX,EAAMO,KAAMK,SAAUZ,EAAMa,YCHpDC,EAAa,CAACC,OAAU,OAC1BC,MAAS,MACTC,gBAAiB,MACjBC,OAAU,kBAQCC,EAND,SAACnB,GACX,OAAOC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOiB,MAAO,CAACJ,MAAQ,SAASf,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,MAAIiB,MAAO,CAACJ,MAAQ,QAAQf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,IAAyBH,EAAAC,EAAAC,cAAA,UAAKH,EAAMqB,eACjGpB,EAAAC,EAAAC,cAAA,MAAIiB,MAAO,CAACE,mBAAoB,YAAYrB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOiB,MAAON,EAAYS,YAAY,eAAeb,KAAK,eCD/Gc,EAPG,SAACxB,GAEf,OAAOC,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,aAAQH,EAAMyB,SCYHC,EAdA,WAOX,OAAOzB,EAAAC,EAAAC,cAAA,WANQ,CACZ,YACA,UACP,aAIgBwB,IAAI,SAAChB,EAAMiB,GACrB,OAAQ3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAWJ,MAAOd,QC8BjBmB,6MAlCfC,MAAQ,CACNC,QAAS,CAAC,CACRzB,KAAK,SAASC,IAAI,QAGtByB,mBAAmB,WACjBC,EAAKC,SAAS,CACZH,QAAQ,CAAC,CACPzB,KAAK,cAAeC,IAAI,UAK9B4B,mBAAoB,SAACC,GACnBH,EAAKC,SAAS,CACZH,QAAQ,CAAC,CACPzB,KAAK8B,EAAMC,OAAO3B,MAAOH,IAAK,gFAKzB,OACPP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACoC,EAAD,CAAQlB,YAAY,mBACpBpB,EAAAC,EAAAC,cAACqC,EAAD,MACCvC,EAAAC,EAAAC,cAACsC,EAAD,CAAQlC,KAAK,OAAOC,IAAI,MAAxB,+BACAP,EAAAC,EAAAC,cAACsC,EAAD,CAAQlC,KAAK,OAAOC,IAAI,OACxBP,EAAAC,EAAAC,cAACsC,EAAD,CAAQlC,KAAMmC,KAAKX,MAAMC,QAAQ,GAAGzB,KAAMC,IAAI,KAAKF,MAAOoC,KAAKT,mBAAoBpB,OAAQ6B,KAAKN,qBALlG,MAMInC,EAAAC,EAAAC,cAAA,UAAQE,QAASqC,KAAKT,oBAAtB,iBA7BUU,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0c6922bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './Person.css';\r\n\r\nconst person = (props) => {\r\n    return (<div className=\"divContainer\"><p onClick={props.click}>I am a person. my name is {props.name} and my age is {props.age}</p>\r\n    <p>{props.children}</p>\r\n    <input type=\"text\" value={props.name} onChange={props.change}/>\r\n    </div>)\r\n}\r\n\r\nexport default person;","import React from 'react'\r\nconst colStyle = {width:25};\r\nconst tableStyle = {width:100}\r\nconst inputStyle = {\"height\": \"57px\",\r\n    \"width\": \"80%\",\r\n    \"border-radius\": \"8px\",\r\n    \"border\": \"2px solid grey\"}\r\n\r\nconst header =(props)=>{\r\n    return(<div><table style={{\"width\":\"100%\"}}><tr><td style={{\"width\":\"25%\"}}><div className=\"header\"> <h1>{props.mainHeading}</h1>\r\n        </div></td><td style={{\"background-color\": \"#988c8c\"}}><div><input style={inputStyle} placeholder=\"Here you go!\" type=\"text\"/></div></td></tr></table></div>)\r\n    \r\n}\r\n\r\nexport default header;","import React from 'react'\r\n\r\nconst sidecompo = (props)=>{\r\n    \r\n    return(<div>\r\n    <label>{props.compo}</label>\r\n    </div>)\r\n}\r\n\r\nexport default sidecompo;","import React from 'react'\r\nimport Sidecompo from '../Sidecompo/Sidecompo';\r\n\r\nconst sidebar =()=>{\r\n   var sideCompos =[\r\n       'alphabets',\r\n       'numbers',\r\n'questions'\r\n   ] \r\n    \r\n    return(<div>\r\n    {sideCompos.map((value,index)=>{\r\n      return (<Sidecompo compo={value}/>) \r\n    })}\r\n    </div>)\r\n}\r\n\r\nexport default sidebar;","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './Person/Person';\nimport Header from './Header/Header';\nimport Sidebar from './Sidebar/Sidebar';\n\nclass App extends Component {\nstate = {\n  persons: [{\n    name:'Nomane',age:27\n  }]\n}\nbuttonClickHandler=()=>{\n  this.setState({\n    persons:[{\n      name:'ChangedName', age:30\n    }]\n  })\n}\n\ninputChangeHandler =(event)=>{\n  this.setState({\n    persons:[{\n      name:event.target.value, age: 27\n    }]\n  })\n}\n\nrender(){  return (\n    <div className=\"App\">\n     <Header mainHeading=\"Trade it dude!\"></Header>\n     <Sidebar/>\n      <Person name=\"Ebin\" age=\"28\">My hobby is playing cricket</Person>\n      <Person name=\"Rosh\" age=\"28\"/>\n      <Person name={this.state.persons[0].name} age=\"80\" click={this.buttonClickHandler} change={this.inputChangeHandler}/>\n     // <button onClick={this.buttonClickHandler} >Click</button>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}